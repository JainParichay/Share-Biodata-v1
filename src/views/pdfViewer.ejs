<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
    <style>
      body {
        background-color: #f5f5f5;
        margin: 0;
        padding: 0;
        min-height: 100vh;
      }

      .main-container {
        padding-top: 56px; /* Height of navbar */
      }

      #pdfContainer {
        width: 100%;
        min-height: calc(100vh - 56px);
        background-color: #e9ecef;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .page {
        margin: 20px auto;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: white;
        border-radius: 4px;
      }

      #loadingContainer {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.95);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1050;
      }

      .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #e9ecef;
        border-top: 6px solid #0d6efd;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      .loading-text {
        margin-top: 20px;
        font-family: system-ui, -apple-system, sans-serif;
        color: #495057;
        font-size: 1.1rem;
      }

      .error-message {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        max-width: 500px;
        width: 90%;
      }

      .error-message h3 {
        color: #dc3545;
        margin-bottom: 1rem;
      }

      .error-message p {
        color: #6c757d;
        margin-bottom: 0.5rem;
      }

      /* PDF controls */
      .pdf-controls {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.9);
        padding: 10px 20px;
        border-radius: 30px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        display: flex;
        gap: 15px;
        align-items: center;
      }

      .zoom-controls {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
  </head>
  <body>
    <%- include('./components/Navbar', { user: user }) %>

    <div class="main-container">
      <div id="loadingContainer">
        <div class="spinner"></div>
        <div class="loading-text">Loading PDF...</div>
      </div>

      <div id="pdfContainer"></div>

      <div class="pdf-controls">
        <div class="zoom-controls">
          <button
            class="btn btn-sm btn-outline-primary"
            onclick="changeZoom(-0.2)"
          >
            <i class="bi bi-zoom-out"></i> -
          </button>
          <span id="zoomLevel" class="mx-2">100%</span>
          <button
            class="btn btn-sm btn-outline-primary"
            onclick="changeZoom(0.2)"
          >
            <i class="bi bi-zoom-in"></i> +
          </button>
        </div>
        <button
          class="btn btn-sm btn-outline-secondary"
          onclick="downloadPDF()"
        >
          <i class="bi bi-download"></i> Download
        </button>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      pdfjsLib.GlobalWorkerOptions.workerSrc =
        "https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js";

      let currentScale = 1.5;
      let currentPdf = null;

      async function renderPage(pageNum, scale) {
        const page = await currentPdf.getPage(pageNum);
        const viewport = page.getViewport({ scale });

        const canvas = document.createElement("canvas");
        canvas.className = "page";
        const context = canvas.getContext("2d");
        canvas.height = viewport.height;
        canvas.width = viewport.width;

        await page.render({
          canvasContext: context,
          viewport: viewport,
        }).promise;

        return canvas;
      }

      async function loadPDF() {
        const fileId = "<%= fileId %>";
        const container = document.getElementById("pdfContainer");
        const loadingContainer = document.getElementById("loadingContainer");
        const loadingText = loadingContainer.querySelector(".loading-text");

        try {
          loadingText.textContent = "Loading PDF document...";
          currentPdf = await pdfjsLib.getDocument(`/pdf/stream/${fileId}`)
            .promise;
          const totalPages = currentPdf.numPages;
          container.innerHTML = "";

          // Render first page immediately
          loadingText.textContent = "Rendering first page...";
          const firstPage = await renderPage(1, currentScale);
          container.appendChild(firstPage);

          // Hide loading screen after first page is rendered
          loadingContainer.style.display = "none";
          updateZoomLevel();

          // Render remaining pages in the background
          for (let pageNum = 2; pageNum <= totalPages; pageNum++) {
            const canvas = await renderPage(pageNum, currentScale);
            container.appendChild(canvas);

            // Update loading text without showing the loading screen
            loadingText.textContent = `Rendering page ${pageNum} of ${totalPages}...`;
          }
        } catch (error) {
          console.error("Error loading PDF:", error);
          loadingContainer.innerHTML = `
            <div class="error-message">
              <h3>Error Loading PDF</h3>
              <p>Sorry, we couldn't load the PDF document. Please try again later.</p>
              <p>Error: ${error.message}</p>
            </div>
          `;
        }
      }

      async function changeZoom(delta) {
        if (!currentPdf) return;

        currentScale = Math.max(0.5, Math.min(3, currentScale + delta));
        const container = document.getElementById("pdfContainer");
        container.innerHTML = ""; // Clear current pages

        const loadingContainer = document.getElementById("loadingContainer");
        loadingContainer.style.display = "flex";

        try {
          for (let pageNum = 1; pageNum <= currentPdf.numPages; pageNum++) {
            const canvas = await renderPage(pageNum, currentScale);
            container.appendChild(canvas);
          }
        } finally {
          loadingContainer.style.display = "none";
          updateZoomLevel();
        }
      }

      function updateZoomLevel() {
        const zoomLevel = document.getElementById("zoomLevel");
        zoomLevel.textContent = `${Math.round(currentScale * 100)}%`;
      }

      async function downloadPDF() {
        const fileId = "<%= fileId %>";
        try {
          const response = await fetch(`/pdf/stream/${fileId}`);
          if (!response.ok) throw new Error("Download failed");

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "<%= title %>.pdf";
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);
        } catch (error) {
          console.error("Error downloading PDF:", error);
          alert("Failed to download PDF. Please try again.");
        }
      }

      document.addEventListener("DOMContentLoaded", loadPDF);
    </script>
  </body>
</html>
