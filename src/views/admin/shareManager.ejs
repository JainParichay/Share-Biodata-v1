<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Share Manager - Admin</title>
    <link rel="stylesheet" href="/css/style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
  </head>
  <body>
    <div class="page-wrapper">
      <header>
        <div class="container header-content">
          <h1 class="header-title">Share Manager</h1>
          <div class="header-stats">...</div>
        </div>
      </header>

      <% if (process.env.NODE_ENV !== 'production') { %>
      <div class="container debug-info">
        <div class="admin-section mt-4">
          <h3 class="text-sm font-semibold mb-2">Debug Information</h3>
          <pre class="text-xs bg-gray-100 p-4 rounded"><code>
Service Account Email: <%= serviceEmail %> 
          </code></pre>
        </div>
      </div>
      <% } %>
      <main class="container">
        <!-- Create Share Section -->
        <%- include('../components/LazyLoader', { component:
        'admin/ShareCreator', props: { adminKey } }) %>

        <!-- Active Shares Section -->
        <%- include('../components/LazyLoader', { component:
        'admin/ActiveShares', props: { adminKey, baseUrl } }) %>
      </main>
    </div>

    <div id="toast" class="toast">Link copied to clipboard!</div>

    <script>
      // Toast notification
      window.showToast = function (message, isError = false) {
        const toast = document.getElementById("toast");
        toast.textContent = message;
        if (isError) toast.classList.add("toast-error");
        toast.classList.add("show");
        setTimeout(() => {
          toast.classList.remove("show", "toast-error");
        }, 3000);
      };

      // Make refreshActiveShares globally available
      window.refreshActiveShares = function () {
        const activeSharesComponent = document.querySelector(
          '[data-component="admin/ActiveShares"]'
        );
        if (activeSharesComponent) {
          window.refreshComponent(activeSharesComponent);
          window.showToast("Refreshing share list...");
        }
      };

      document.addEventListener("DOMContentLoaded", () => {
        const componentToken = "<%= componentToken %>";

        const loadComponent = async (element) => {
          const component = element.dataset.component;
          const props = JSON.parse(
            decodeURIComponent(element.dataset.props || "{}")
          );

          try {
            // First fetch the HTML
            const htmlResponse = await fetch(`/api/components/${component}`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "X-Component-Token": componentToken,
                Accept: "text/html",
              },
              body: JSON.stringify(props),
              credentials: "include",
            });

            if (!htmlResponse.ok) {
              throw new Error(
                `Failed to load component: ${htmlResponse.status}`
              );
            }

            const html = await htmlResponse.text();
            element.innerHTML = html;

            // If this is ActiveShares component, fetch the JSON data separately
            // if (component === "admin/ActiveShares") {
            //   const jsonResponse = await fetch(`/api/components/${component}`, {
            //     method: "POST",
            //     headers: {
            //       "Content-Type": "application/json",
            //       "X-Component-Token": componentToken,
            //       Accept: "application/json",
            //     },
            //     body: JSON.stringify(props),
            //     credentials: "include",
            //   });

            //   if (jsonResponse.ok) {
            //     const data = await jsonResponse.json();
            //     const headerStats = document.querySelector(".header-stats");
            //     if (headerStats && data.folders && data.shareLinks) {
            //       headerStats.textContent = `${data.folders.length} folders, ${data.shareLinks.length} active shares`;
            //     }
            //   }
            // }
          } catch (error) {
            console.error("Error loading component:", error);
            element.innerHTML =
              '<div class="text-red-500 p-4">Failed to load component</div>';
          }
        };

        window.refreshComponent = async (element) => {
          if (!element || !element.dataset.component) return;
          await loadComponent(element);
        };

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                loadComponent(entry.target);
                observer.unobserve(entry.target);
              }
            });
          },
          { rootMargin: "50px" }
        );

        document.querySelectorAll(".lazy-component").forEach((component) => {
          observer.observe(component);
        });
      });
    </script>
    <script src="/js/activeShares.js"></script>
  </body>
</html>
